unit TestuntCalculadora;
{

  Delphi DUnit Test Case
  ----------------------
  This unit contains a skeleton test case class generated by the Test Case Wizard.
  Modify the generated code to correctly setup and call the methods from the unit 
  being tested.

}

interface

uses
  TestFramework, System.SysUtils, untCalculadora, Vcl.StdCtrls, Winapi.Windows,
  System.Variants, Vcl.Graphics, Vcl.Dialogs, Vcl.Controls, Vcl.Forms, Winapi.Messages,
  System.Classes;

type
  // Test methods for class TformCalculadora

  TestTformCalculadora = class(TTestCase)
  strict private
    FformCalculadora: TformCalculadora;
  public
    impostoA: Double;
    impostoB: Double;
    procedure SetUp; override;
    procedure TearDown; override;
  published
    procedure TestImpostoA;
    procedure TestImpostoB;
    procedure TestImpostoC;
  end;

implementation

procedure TestTformCalculadora.SetUp;
begin
  FformCalculadora := TformCalculadora.Create(nil);
end;

procedure TestTformCalculadora.TearDown;
begin
  FformCalculadora.Free;
  FformCalculadora := nil;
end;

procedure TestTformCalculadora.TestImpostoA;
var
  ReturnValue: Double;
  valorBase: string;
begin
  valorBase := 5000;
  // TODO: Setup method call parameters
  ReturnValue := FformCalculadora.ImpostoA(valorBase);
  impostoA := ReturnValue;
  // TODO: Validate method results
  CheckEquals(ReturnValue, 500);
end;

procedure TestTformCalculadora.TestImpostoB;
var
  ReturnValue: Double;
begin
  // TODO: Setup method call parameters
  ReturnValue := FformCalculadora.ImpostoB(impostoA);
  impostoB := ReturnValue;
  // TODO: Validate method results
  CheckEquals(ReturnValue, 485);
end;

procedure TestTformCalculadora.TestImpostoC;
var
  ReturnValue: Double;
begin
  // TODO: Setup method call parameters
  ReturnValue := FformCalculadora.ImpostoC(impostoA, impostoB);
  // TODO: Validate method results
  CheckEquals(ReturnValue, 985);
end;

initialization
  // Register any test cases with the test runner
  RegisterTest(TestTformCalculadora.Suite);
end.

